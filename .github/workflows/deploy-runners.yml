on:
  workflow_dispatch:
    inputs:
      build-image:
        description: 'Build the image?'
        type: boolean
        default: false
        required: true
      virtual-environments-tag:
        description: 'Tag from virtual environments repo.'
        type: string
        default: LATEST
        required: true
      location:
        description: 'Location'
        type: choice
        options:
          - 'westeurope'
          - 'francecentral'
      terraform-action:
        description: 'Terraform action'
        type: choice
        options:
          - 'plan'
          - 'plan+apply'
      runner:
        description: 'runner'
        type: choice
        options:
          - 'ubuntu-latest'
          - 'self-hosted'

env:
  runner-resource-group: rg-vmss-github-runner
  vnet-resource-group: rg-vnet-default
  image-storage-account: stghrunnerimage
  queue-storage-account: stghrunnerqueue
  terraform-storage-account: stghrunnertfstate
  image-container-name: system
  terraform-container-name: tfstate
  vnet-name: vnet-default
  subnet-name: snet-github-runners
  image-display-name: ubuntu20
  image-template-path: ./virtual-environments/images/linux/ubuntu2004.json

name: vmss-self-hosted-runners
jobs:
  build-runner-image:
    runs-on: ${{ github.event.inputs.runner }}
    env:
      PRIVATE_VIRTUAL_NETWORK_WITH_PUBLIC_IP: true
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
    - name: Log inputs
      run: |
        echo "Running with the following input:"
        echo "${{ toJSON(github.event.inputs) }}"

    - uses: actions/checkout@v3

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: '{"clientId": "${{ secrets.AZURE_CLIENT_ID }}", "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}", "tenantId": "${{ secrets.AZURE_TENANT_ID }}", "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}"}'

    - name: Ensure storage accounts for images and terraform state exist
      shell: pwsh
      run: |
        # Todo: private endpoints
        az storage account create --name ${{ env.image-storage-account }} --resource-group ${{ env.runner-resource-group }} --sku Premium_LRS --location ${{  github.event.inputs.location }} --min-tls-version TLS1_2
        az storage container create --name ${{ env.image-container-name }} --account-name ${{ env.image-storage-account }}  --resource-group ${{ env.runner-resource-group }}
        az storage account create --name ${{ env.terraform-storage-account }} --resource-group ${{ env.runner-resource-group }} --sku Standard_LRS --location ${{  github.event.inputs.location }} --min-tls-version TLS1_2
        az storage container create --name ${{ env.terraform-container-name }} --account-name ${{ env.terraform-storage-account }}  --resource-group ${{ env.runner-resource-group }}

    - name: Checkout virtual environments at latest official ${{ env.image-display-name }} tag  ${{ github.event.inputs.virtual-environments-tag }}
      if: github.event.inputs.build-image
      shell: pwsh
      run: |
        ./scripts/checkout-virtual-environments-repo.ps1 -imageDisplayName ${{ env.image-display-name }} -tag ${{ github.event.inputs.virtual-environments-tag }}

    - name: Build image using Packer
      if: github.event.inputs.build-image
      shell: pwsh
      run: |
        ./virtual-environments/images.CI/linux-and-win/build-image.ps1 `
            -ResourcesNamePrefix ${{ env.image-display-name }} `
            -ClientId ${{ secrets.AZURE_CLIENT_ID }} `
            -ClientSecret  ${{ secrets.AZURE_CLIENT_SECRET }} `
            -TemplatePath ${{ env.image-template-path }} `
            -ResourceGroup ${{ env.runner-resource-group }} `
            -StorageAccount ${{ env.image-storage-account }} `
            -SubscriptionId ${{ secrets.AZURE_SUBSCRIPTION_ID }} `
            -TenantId ${{ secrets.AZURE_TENANT_ID }} `
            -Location westeurope `
            -VirtualNetworkName ${{ env.vnet-name }} `
            -VirtualNetworkRG ${{ env.vnet-resource-group }} `
            -VirtualNetworkSubnet ${{ env.subnet-name }}

    - name: Create VM image from Disk image
      id: create-image
      shell: pwsh
      run: |
        ./scripts/create-vm-image.ps1 `
                      -StorageAccount ${{ env.image-storage-account }} `
                      -ContainerName ${{ env.image-container-name }} `
                      -ResourceGroup ${{ env.runner-resource-group }} `
                      -ImageDisplayName ${{ env.image-display-name }} `
                      -DateQuery latest

    - name: Setup Terraform
      id: terraform-setup
      uses: hashicorp/setup-terraform@v1

    - name: Terraform init
      id: terraform-init
      run: |
        terraform -chdir=terraform init \
            -backend-config="key=ghrunner-${{ github.event.inputs.location }}.tfstate" \
            -backend-config="resource_group_name=${{ env.runner-resource-group }}" \
            -backend-config="storage_account_name=${{ env.image-storage-account }}"

    - name: Terraform format
      id: terraform-fmt
      run: terraform -chdir=terraform fmt -check

    - name: Terraform validate
      id: terraform-validate
      run: terraform -chdir=terraform validate

    - name: Terraform plan
      id: terraform-plan
      run: |
        terraform -chdir=terraform plan -input=false \
            --var-file=default.tfvars \
            --var-file=ae.tfvars \
            -var='vnet=${{env.vnet-name }}' \
            -var='subnet=${{env.subnet-name }}' \
            -var='vnet_resource_group=${{env.vnet-resource-group }}' \
            -var='runner_resource_group=${{ env.runner-resource-group }}' \
            -var='location=${{ github.event.inputs.location }}' \
            -var='admin_pwd=${{ secrets.ADMIN_PWD }}' \
            -var='runner_image_name=${{ steps.create-image.outputs.image-name }}'

    - name: Terraform apply
      id: terraform-apply
      if: github.event.inputs.terraform-action == 'plan+apply'
      run: |
        terraform -chdir=terraform apply -input=false --auto-approve \
            --var-file=default.tfvars \
            --var-file=ae.tfvars \
            -var='vnet=${{env.vnet-name }}' \
            -var='subnet=${{env.subnet-name }}' \
            -var='vnet_resource_group=${{env.vnet-resource-group }}' \
            -var='runner_resource_group=${{ env.runner-resource-group }}' \
            -var='location=${{ github.event.inputs.location }}' \
            -var='admin_pwd=${{ secrets.ADMIN_PWD }}' \
            -var='runner_image_name=${{ steps.create-image.outputs.image-name }}'

