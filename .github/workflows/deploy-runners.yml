on:
  workflow_dispatch:
    inputs:
      build-image:
        description: 'Build the image?'
        type: boolean
        default: false
        required: true
      vmss-runner-name:
        description: 'Name of the scale-set for the github runners'
        type: string
        default: vmss-github-runners-001
        required: true
      vm-scaler-name:
        description: 'Name of the vm runner the scaler'
        type: string
        default: vm-github-scaler-001
        required: true
      github-repo:
        description: 'Name of the github repo where runners should be registered'
        type: string
        default: nlighten/vmss-github-runner
        required: true
      runner-labels:
        description: 'Comma separated list of labels'
        type: string
        default: foo,bar
        required: true
      pool-min-instances:
        description: 'Minimum number of instances in the runner pool (>= 1)'
        type: number
        default: 1
        required: true
      pool-max-instances:
        description: 'Maximum number of instances in the runner pool'
        type: number
        default: 4
        required: true
      pool-free-target-percentage:
        description: 'Target percentage of free/available runners'
        type: number
        default: 25
        required: true

env:
  runner-resource-group: rg-vmss-github-runner
  vnet-resource-group: rg-vnet-default
  blob-storage-account: stgithubrunnerdemo
  queue-storage-account: stgithubrunnerqueue
  vnet: vnet-default
  subnet: snet-github-runners
  blob-container-name: system
  image-display-name: ubuntu20
  image-template-path: ./virtual-environments/images/linux/ubuntu2004.json
  use-public-ip-for-image-build: false


name: VmssGithubRunner
jobs:
  build-runner-image:
    runs-on: ubuntu-latest
    # env:
      # ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      # ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      # ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      # ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
    - uses: actions/checkout@v3


    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}


    - name: Checkout virtual environments at latest official ${{ env.image-display-name }} tag
      # if: ${{ github.event.inputs.build-image == true }}
      shell: pwsh
      run: |
        ./scripts/checkout-virtual-environments-repo.ps1 -ImageDisplayName ${{ env.image-display-name }}


    - name: Ensure storage accounts exists
      shell: pwsh
      run: |
        az storage account create --name ${{ env.blob-storage-account }} --resource-group ${{ env.runner-resource-group }} --sku Premium_LRS --location westeurope
        az storage container create --name ${{ env.blob-container-name }} --account-name ${{ env.blob-storage-account }}  --resource-group ${{ env.runner-resource-group }}
        az storage account create --name ${{ env.queue-storage-account }} --resource-group ${{ env.runner-resource-group }} --location westeurope
        az storage queue create --name ${{ github.event.inputs.vmss-runner-name }} --account-name ${{ env.queue-storage-account }}


    - name: Build image using Packer
      # if: ${{ github.event.inputs.build-image == true }}
      shell: pwsh
      run: |
        ./virtual-environments/images.CI/linux-and-win/build-image.ps1 `
            -ResourcesNamePrefix ${{ env.image-display-name }} `
            -ClientId ${{ secrets.AZURE_CLIENT_ID }} `
            -ClientSecret  ${{ secrets.AZURE_CLIENT_SECRET }} `
            -TemplatePath ${{ env.image-template-path }} `
            -ResourceGroup ${{ env.runner-resource-group }} `
            -StorageAccount ${{ env.blob-storage-account }} `
            -SubscriptionId ${{ secrets.AZURE_SUBSCRIPTION_ID }} `
            -TenantId ${{ secrets.AZURE_TENANT_ID }} `
            -Location westeurope `
            -UsePublicIp ${{ env.use-public-ip-for-image-build }} `
            -VirtualNetworkName ${{ env.vnet }} `
            -VirtualNetworkRG ${{ env.vnet-resource-group }} `
            -VirtualNetworkSubnet ${{ env.subnet }} `

    - name: Create VM image from Disk image
      # if: ${{ github.event.inputs.build-image == true }}
      shell: pwsh
      run: |
        ./scripts/create-vm-image.ps1 `
                      -StorageAccount ${{ env.blob-storage-account }} `
                      -ContainerName ${{ env.blob-container-name }} `
                      -ResourceGroup ${{ env.runner-resource-group }} `
                      -ImageDisplayName ${{ env.image-display-name }} `
                      -DateQuery latest


    - name: Create cloud-config for scaler 
      shell: bash
      run: |
        envsubst '$KEY_VAULT_URL,$GITHUB_REPO,$SUBSCRIPTION_ID,$RESOURCE_GROUP,$VMSS_NAME,$STORAGE_ACCOUNT_NAME,$USER_NAME,$MIN_RUNNERS,$MAX_RUNNERS,$TARGET_AVAILABLE_RUNNERS_PERCENT,$VNET_CIDR'< config/cloud-config-scaler.yaml.template > config/cloud-config-scaler.yaml
        cat config/cloud-config-scaler.yaml
      env:
        KEY_VAULT_URL: https://vmssrunnerkeyvault.vault.azure.net/
        GITHUB_REPO: ${{ github.event.inputs.github-repo }}
        SUBSCRIPTION_ID: 112e1628-4525-4638-9ce0-8e8757144034
        RESOURCE_GROUP: ${{ env.runner-resource-group }}
        VMSS_NAME: ${{ github.event.inputs.vmss-runner-name }}
        STORAGE_ACCOUNT_NAME: ${{ env.queue-storage-account }}
        USER_NAME: ghscaler
        TARGET_AVAILABLE_RUNNERS_PERCENT: ${{ github.event.inputs.pool-free-target-percentage }}
        MIN_RUNNERS: ${{ github.event.inputs.pool-min-instances }}
        MAX_RUNNERS: ${{ github.event.inputs.pool-max-instances }}
        VNET_CIDR: '0.0.0.0/0'


    - name: Create VM
      id: create-vm
      shell: pwsh
      run: |
        ./scripts/create-scaler-vm.ps1 `
                      -Vm ${{ github.event.inputs.vm-scaler-name }} `
                      -User ghscaler `
                      -Password ${{ secrets.VMSS_PASSWORD }} `
                      -ResourceGroup ${{ env.runner-resource-group }} `
                      -VirtualNetworkName ${{ env.vnet }} `
                      -VirtualNetworkSubnet ${{ env.subnet }} `
                      -NetworkResourceGroup ${{ env.vnet-resource-group }}


    - name: Create cloud-config for runner 
      shell: bash
      run: |
        envsubst '$SCALER_IP,$GITHUB_REPO,$USER_NAME,$LABELS'< config/cloud-config-runner.yaml.template > config/cloud-config-runner.yaml
      env:
        SCALER_IP: ${{ steps.create-vm.outputs.scaler-ip }}
        GITHUB_REPO: ${{ github.event.inputs.github-repo }}
        USER_NAME: ghrunner
        LABELS: ${{ github.event.inputs.runner-labels }}


    - name: Create VMSS 
      shell: pwsh
      run: |
        ./scripts/create-runner-vmss.ps1 `
                      -VmssName ${{ github.event.inputs.vmss-runner-name }} `
                      -InstanceCount ${{ github.event.inputs.pool-min-instances }} `
                      -StorageAccount ${{ env.blob-storage-account }} `
                      -User ${{ secrets.VMSS_USER }} `
                      -Password ${{ secrets.VMSS_PASSWORD }} `
                      -ResourceGroup ${{ env.runner-resource-group }} `
                      -ImageDisplayName ${{ env.image-display-name }} `
                      -VirtualNetworkName ${{ env.vnet }} `
                      -VirtualNetworkSubnet ${{ env.subnet }} `
                      -NetworkResourceGroup ${{ env.vnet-resource-group }} `
                      -DateQuery latest


    - name: Create Role Assignments 
      shell: pwsh
      run: |
        ./scripts/create-role-assignments.ps1 `
                      -VmName ${{ github.event.inputs.vm-scaler-name }} `
                      -VmssName ${{ github.event.inputs.vmss-runner-name }} `
                      -QueueStorageAccount ${{ env.queue-storage-account }} `
                      -ResourceGroup ${{ env.runner-resource-group }} `
                      -NetworkResourceGroup ${{ env.vnet-resource-group }}
